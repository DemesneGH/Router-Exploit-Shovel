#!/usr/bin/env python

import sys
sys.path.append("..")
import struct
import pickle

#Load base address
loadBase = 0x400000

#stack overflow point
#addiu $a1,$sp,xxx
overflowP = ['27','a5']

#contrlReg point
#sw $ra,xxx($sp)
contrlRegP = ['af','bf']

#Offset overflow point
overflowO = 0

#Offset contrlReg point
contrlRegO = 0


def GetGeneratePadding(binaryPath, OverflowPoint):

	#read binaryfile
	binary = open(binaryPath,"rb")
		
	#find stack overflow point
		#Branch delay slot
	binary.seek(OverflowPoint - loadBase + 0x4)
	Opstr = binary.read(2)
	Op = ["{:02x}".format(ord(c)) for c in Opstr]

	if overflowP == Op:
		s = binary.read(2)
		l = ["{:02x}".format(ord(c)) for c in s]
		overflowO = int(l[0],16) + int(l[1],16)
		print "find the stack overflow point Offset " + hex(overflowO)
		
		#Roll up
	count = 0
	while True:
		count += 0x4		
		binary.seek(OverflowPoint - loadBase - count)
		Opstr = binary.read(2)
		Op = ["{:02x}".format(ord(c)) for c in Opstr]
		if overflowP == Op:
			s = binary.read(2)
			l = ["{:02x}".format(ord(c)) for c in s]
			overflowO = int(l[0],16) + int(l[1],16)
			print "find the stack overflow point Offset " + hex(overflowO)
			break
	
	#find contrlReg point
		#Roll up
	count = 0
	while True:
		count += 0x4		
		binary.seek(OverflowPoint - loadBase - count)
		Opstr = binary.read(2)
		Op = ["{:02x}".format(ord(c)) for c in Opstr]
		if contrlRegP == Op:
			s = binary.read(2)
			l = ["{:02x}".format(ord(c)) for c in s]
			contrlRegO = int(l[0],16) + int(l[1],16)
			print "find the contrlReg point Offset " + hex(contrlRegO)
			break		
	
	#computing the Control offset for generate padding
		#for gadg
	paddingO = contrlRegO - overflowO -0x4
	binary.close()
	return paddingO



